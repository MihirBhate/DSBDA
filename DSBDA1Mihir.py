{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM7c9HNG59f6m9FMLveKNxh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MihirBhate/DSBDA/blob/DSBDA/DSBDA1Mihir.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n3hnbUspwQl4",
        "outputId": "ff1f93ff-eda6-46e1-da7b-87c85d3dd3fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing Values:\n",
            " Unnamed: 0        0\n",
            "Manufacturer      0\n",
            "Category          0\n",
            "Screen            0\n",
            "GPU               0\n",
            "OS                0\n",
            "CPU_core          0\n",
            "Screen_Size_cm    4\n",
            "CPU_frequency     0\n",
            "RAM_GB            0\n",
            "Storage_GB_SSD    0\n",
            "Weight_kg         5\n",
            "Price             0\n",
            "dtype: int64\n",
            "\n",
            "Summary Statistics:\n",
            "        Unnamed: 0    Category         GPU          OS    CPU_core  \\\n",
            "count  238.000000  238.000000  238.000000  238.000000  238.000000   \n",
            "mean   118.500000    3.205882    2.151261    1.058824    5.630252   \n",
            "std     68.848868    0.776533    0.638282    0.235790    1.241787   \n",
            "min      0.000000    1.000000    1.000000    1.000000    3.000000   \n",
            "25%     59.250000    3.000000    2.000000    1.000000    5.000000   \n",
            "50%    118.500000    3.000000    2.000000    1.000000    5.000000   \n",
            "75%    177.750000    4.000000    3.000000    1.000000    7.000000   \n",
            "max    237.000000    5.000000    3.000000    2.000000    7.000000   \n",
            "\n",
            "       Screen_Size_cm  CPU_frequency      RAM_GB  Storage_GB_SSD   Weight_kg  \\\n",
            "count      234.000000     238.000000  238.000000      238.000000  233.000000   \n",
            "mean        37.269615       2.360084    7.882353      245.781513    1.862232   \n",
            "std          2.971365       0.411393    2.482603       34.765316    0.494332   \n",
            "min         30.480000       1.200000    4.000000      128.000000    0.810000   \n",
            "25%         35.560000       2.000000    8.000000      256.000000    1.440000   \n",
            "50%         38.100000       2.500000    8.000000      256.000000    1.870000   \n",
            "75%         39.624000       2.700000    8.000000      256.000000    2.200000   \n",
            "max         43.942000       2.900000   16.000000      256.000000    3.600000   \n",
            "\n",
            "             Price  \n",
            "count   238.000000  \n",
            "mean   1462.344538  \n",
            "std     574.607699  \n",
            "min     527.000000  \n",
            "25%    1066.500000  \n",
            "50%    1333.000000  \n",
            "75%    1777.000000  \n",
            "max    3810.000000  \n",
            "\n",
            "Variable Types:\n",
            " Unnamed: 0          int64\n",
            "Manufacturer       object\n",
            "Category            int64\n",
            "Screen             object\n",
            "GPU                 int64\n",
            "OS                  int64\n",
            "CPU_core            int64\n",
            "Screen_Size_cm    float64\n",
            "CPU_frequency     float64\n",
            "RAM_GB              int64\n",
            "Storage_GB_SSD      int64\n",
            "Weight_kg         float64\n",
            "Price               int64\n",
            "dtype: object\n",
            "\n",
            "Data Dimensions:\n",
            " (238, 13)\n",
            "\n",
            "Mean Values:\n",
            " Unnamed: 0         118.500000\n",
            "Category             3.205882\n",
            "GPU                  2.151261\n",
            "OS                   1.058824\n",
            "CPU_core             5.630252\n",
            "Screen_Size_cm      37.269615\n",
            "CPU_frequency        2.360084\n",
            "RAM_GB               7.882353\n",
            "Storage_GB_SSD     245.781513\n",
            "Weight_kg            1.862232\n",
            "Price             1462.344538\n",
            "dtype: float64\n",
            "\n",
            "Median Values:\n",
            " Unnamed: 0         118.50\n",
            "Category             3.00\n",
            "GPU                  2.00\n",
            "OS                   1.00\n",
            "CPU_core             5.00\n",
            "Screen_Size_cm      38.10\n",
            "CPU_frequency        2.50\n",
            "RAM_GB               8.00\n",
            "Storage_GB_SSD     256.00\n",
            "Weight_kg            1.87\n",
            "Price             1333.00\n",
            "dtype: float64\n",
            "\n",
            "Mode Values:\n",
            " Unnamed: 0              0\n",
            "Manufacturer         Dell\n",
            "Category              3.0\n",
            "Screen            Full HD\n",
            "GPU                   2.0\n",
            "OS                    1.0\n",
            "CPU_core              5.0\n",
            "Screen_Size_cm     39.624\n",
            "CPU_frequency         2.5\n",
            "RAM_GB                8.0\n",
            "Storage_GB_SSD      256.0\n",
            "Weight_kg             2.2\n",
            "Price               888.0\n",
            "Name: 0, dtype: object\n",
            "\n",
            " LCOF \n",
            "      Unnamed: 0 Manufacturer  Category     Screen  GPU  OS  CPU_core  \\\n",
            "0             0         Acer         4  IPS Panel    2   1         5   \n",
            "1             1         Dell         3    Full HD    1   1         3   \n",
            "2             2         Dell         3    Full HD    1   1         7   \n",
            "3             3         Dell         4  IPS Panel    2   1         5   \n",
            "4             4           HP         4    Full HD    2   1         7   \n",
            "..          ...          ...       ...        ...  ...  ..       ...   \n",
            "233         233       Lenovo         4  IPS Panel    2   1         7   \n",
            "234         234      Toshiba         3    Full HD    2   1         5   \n",
            "235         235       Lenovo         4  IPS Panel    2   1         5   \n",
            "236         236       Lenovo         3    Full HD    3   1         5   \n",
            "237         237      Toshiba         3    Full HD    2   1         5   \n",
            "\n",
            "     Screen_Size_cm  CPU_frequency  RAM_GB  Storage_GB_SSD  Weight_kg  Price  \n",
            "0            35.560            1.6       8             256       1.60    978  \n",
            "1            39.624            2.0       4             256       2.20    634  \n",
            "2            39.624            2.7       8             256       2.20    946  \n",
            "3            33.782            1.6       8             128       1.22   1244  \n",
            "4            39.624            1.8       8             256       1.91    837  \n",
            "..              ...            ...     ...             ...        ...    ...  \n",
            "233          35.560            2.6       8             256       1.70   1891  \n",
            "234          33.782            2.4       8             256       1.20   1950  \n",
            "235          30.480            2.6       8             256       1.36   2236  \n",
            "236          39.624            2.5       6             256       2.40    883  \n",
            "237          35.560            2.3       8             256       1.95   1499  \n",
            "\n",
            "[238 rows x 13 columns]\n",
            "\n",
            " NOCB \n",
            "      Unnamed: 0 Manufacturer  Category     Screen  GPU  OS  CPU_core  \\\n",
            "0             0         Acer         4  IPS Panel    2   1         5   \n",
            "1             1         Dell         3    Full HD    1   1         3   \n",
            "2             2         Dell         3    Full HD    1   1         7   \n",
            "3             3         Dell         4  IPS Panel    2   1         5   \n",
            "4             4           HP         4    Full HD    2   1         7   \n",
            "..          ...          ...       ...        ...  ...  ..       ...   \n",
            "233         233       Lenovo         4  IPS Panel    2   1         7   \n",
            "234         234      Toshiba         3    Full HD    2   1         5   \n",
            "235         235       Lenovo         4  IPS Panel    2   1         5   \n",
            "236         236       Lenovo         3    Full HD    3   1         5   \n",
            "237         237      Toshiba         3    Full HD    2   1         5   \n",
            "\n",
            "     Screen_Size_cm  CPU_frequency  RAM_GB  Storage_GB_SSD  Weight_kg  Price  \n",
            "0            35.560            1.6       8             256       1.60    978  \n",
            "1            39.624            2.0       4             256       2.20    634  \n",
            "2            39.624            2.7       8             256       2.20    946  \n",
            "3            33.782            1.6       8             128       1.22   1244  \n",
            "4            39.624            1.8       8             256       1.91    837  \n",
            "..              ...            ...     ...             ...        ...    ...  \n",
            "233          35.560            2.6       8             256       1.70   1891  \n",
            "234          33.782            2.4       8             256       1.20   1950  \n",
            "235          30.480            2.6       8             256       1.36   2236  \n",
            "236          39.624            2.5       6             256       2.40    883  \n",
            "237          35.560            2.3       8             256       1.95   1499  \n",
            "\n",
            "[238 rows x 13 columns]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-0105517f3018>:17: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  mean_values = df.mean()\n",
            "<ipython-input-5-0105517f3018>:20: FutureWarning: The default value of numeric_only in DataFrame.median is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  median_values = df.median()\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "local_path = '/content/laptop_pricing_dataset.csv'\n",
        "df = pd.read_csv(local_path)\n",
        "\n",
        "missing_values = df.isnull().sum()\n",
        "print(\"Missing Values:\\n\", missing_values)\n",
        "\n",
        "summary_statistics = df.describe()\n",
        "print(\"\\nSummary Statistics:\\n\", summary_statistics)\n",
        "\n",
        "variable_types = df.dtypes\n",
        "print(\"\\nVariable Types:\\n\", variable_types)\n",
        "\n",
        "data_dimensions = df.shape\n",
        "print(\"\\nData Dimensions:\\n\", data_dimensions)\n",
        "\n",
        "mean_values = df.mean()\n",
        "print(\"\\nMean Values:\\n\", mean_values)\n",
        "\n",
        "median_values = df.median()\n",
        "print(\"\\nMedian Values:\\n\", median_values)\n",
        "\n",
        "mode_values = df.mode().iloc[0]\n",
        "print(\"\\nMode Values:\\n\", mode_values)\n",
        "\n",
        "lcof = df.ffill()\n",
        "print(\"\\n LCOF \\n\",lcof)\n",
        "\n",
        "nocb = df.bfill()\n",
        "print(\"\\n NOCB \\n\",nocb)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "dataset_url = 'https://www.kaggle.com/datasets/aljarah/xAPI-Edu-Data'\n",
        "\n",
        "df = pd.read_csv('xAPI-Edu-Data.csv')\n",
        "\n",
        "missing_values = df.isnull().sum()\n",
        "summary_statistics = df.describe()\n",
        "variable_types = df.dtypes\n",
        "data_dimensions = df.shape\n",
        "\n",
        "df['cp'] = df['cp'].astype('category')\n",
        "\n",
        "df = pd.get_dummies(df, columns=['cp'])\n",
        "\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "id": "jWEOddZHPfW4",
        "outputId": "83b6f3a1-43da-4cde-bf67-731af50a52d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: 'xAPI-Edu-Data.csv'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-13c58ac57dba>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdataset_url\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'https://www.kaggle.com/datasets/aljarah/xAPI-Edu-Data'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'xAPI-Edu-Data.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mmissing_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnull\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    209\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m                     \u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnew_arg_name\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_arg_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    948\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 950\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    951\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    952\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    603\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    604\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 605\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    606\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1440\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1441\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1442\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1444\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1733\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1735\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1736\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1737\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    854\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    855\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 856\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    857\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'xAPI-Edu-Data.csv'"
          ]
        }
      ]
    }
  ]
}